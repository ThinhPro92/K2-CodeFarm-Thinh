const url = "http://localhost:3000/products"; // API endpoint json-server
const productsElement = document.getElementById("products");
const formProduct = document.getElementById("product-form");
const titleEle = document.getElementById("title");
const priceEle = document.getElementById("price");
const quantityEle = document.getElementById("quantity");
const totalAmount = document.getElementById("total-amount");
const btnAddNew = document.getElementById("add-new");

let editingId = null; // N·∫øu != null th√¨ ƒëang ·ªü ch·∫ø ƒë·ªô update s·∫£n ph·∫©m

// üìå H√†m render danh s√°ch s·∫£n ph·∫©m ra b·∫£ng
async function renderProducts() {
  try {
    const res = await axios.get(url); // L·∫•y d·ªØ li·ªáu t·ª´ server
    const data = res.data;

    // T·∫°o HTML table row cho t·ª´ng s·∫£n ph·∫©m
    productsElement.innerHTML = data
      .map(
        (item) => `
        <tr class="border-t" data-id="${item.id}">
          <td class="p-3">${item.id}</td>
          <td class="p-3">${item.title}</td>
          <td class="p-3">${Number(item.price).toLocaleString()} ‚Ç´</td>

          <!-- C·ªôt s·ªë l∆∞·ª£ng c√≥ n√∫t + - -->
          <td class="p-3">
            <div class="flex items-center gap-2">
              <button class="bg-gray-200 px-2 rounded decrease" data-id="${
                item.id
              }">-</button>
              <span class="quantity">${item.quantity}</span>
              <button class="bg-gray-200 px-2 rounded increase" data-id="${
                item.id
              }">+</button>
            </div>
          </td>

          <!-- T·ªïng ti·ªÅn (price * quantity) -->
          <td class="p-3 text-blue-600 font-medium total">
            ${(item.price * item.quantity).toLocaleString()} ‚Ç´
          </td>

          <!-- N√∫t x√≥a & c·∫≠p nh·∫≠t -->
          <td class="p-3 flex gap-2">
            <button class="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded delete" data-id="${
              item.id
            }">Delete</button>
            <button class="bg-yellow-400 hover:bg-yellow-500 px-2 py-1 rounded update" data-id="${
              item.id
            }">Update</button>
          </td>
        </tr>
      `
      )
      .join("");

    attachEvents(data); // G·∫Øn s·ª± ki·ªán sau khi render
    calcTotal(data); // T√≠nh t·ªïng ti·ªÅn ban ƒë·∫ßu
  } catch (err) {
    console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", err);
  }
}

// üìå G·∫Øn c√°c s·ª± ki·ªán click v√†o n√∫t trong b·∫£ng
function attachEvents(data) {
  document
    .querySelectorAll(".delete")
    .forEach((btn) => btn.addEventListener("click", handleDelete));
  document
    .querySelectorAll(".update")
    .forEach((btn) => btn.addEventListener("click", handleEdit));
  document
    .querySelectorAll(".increase")
    .forEach((btn) =>
      btn.addEventListener("click", () =>
        updateQuantity(btn.dataset.id, 1, data)
      )
    );
  document
    .querySelectorAll(".decrease")
    .forEach((btn) =>
      btn.addEventListener("click", () =>
        updateQuantity(btn.dataset.id, -1, data)
      )
    );
}

// üìå H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng (tƒÉng/gi·∫£m)
async function updateQuantity(id, step, data) {
  const product = data.find((item) => item.id == id);
  if (!product) return;

  const newQuantity = Math.max(product.quantity + step, 1); // kh√¥ng cho nh·ªè h∆°n 1

  try {
    await axios.patch(`${url}/${id}`, { quantity: newQuantity });

    // ‚úÖ Update tr·ª±c ti·∫øp DOM ƒë·ªÉ tr√°nh re-render c·∫£ b·∫£ng
    const row = document.querySelector(`tr[data-id="${id}"]`);
    row.querySelector(".quantity").textContent = newQuantity;
    row.querySelector(".total").textContent =
      (product.price * newQuantity).toLocaleString() + " ‚Ç´";

    // üé® Hi·ªáu ·ª©ng highlight khi s·ªë l∆∞·ª£ng thay ƒë·ªïi
    row.querySelector(".total").classList.add("bg-yellow-100");
    setTimeout(
      () => row.querySelector(".total").classList.remove("bg-yellow-100"),
      400
    );

    product.quantity = newQuantity; // C·∫≠p nh·∫≠t data c·ª•c b·ªô ƒë·ªÉ t√≠nh t·ªïng
    calcTotal(data); // T√≠nh l·∫°i t·ªïng ti·ªÅn
  } catch (err) {
    console.error("L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
  }
}

// üìå H√†m t√≠nh t·ªïng ti·ªÅn c·ªßa to√†n b·ªô s·∫£n ph·∫©m
function calcTotal(data) {
  const total = data.reduce((sum, item) => sum + item.price * item.quantity, 0);
  totalAmount.textContent = total.toLocaleString();
}

// üìå X·ª≠ l√Ω submit form (th√™m ho·∫∑c s·ª≠a s·∫£n ph·∫©m)
formProduct.addEventListener("submit", async (e) => {
  e.preventDefault();

  // L·∫•y d·ªØ li·ªáu t·ª´ form
  const data = {
    title: titleEle.value.trim(),
    price: Number(priceEle.value),
    quantity: Number(quantityEle.value),
  };

  // ‚úÖ Validate d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
  if (!data.title || data.title.length < 3) {
    alert("T√™n s·∫£n ph·∫©m ph·∫£i t·ª´ 3 k√Ω t·ª± tr·ªü l√™n!");
    return;
  }
  if (isNaN(data.price) || data.price <= 0) {
    alert("Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0!");
    return;
  }
  if (isNaN(data.quantity) || data.quantity < 1) {
    alert("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 1!");
    return;
  }

  try {
    if (editingId) {
      // N·∫øu ƒëang edit th√¨ g·ªçi PUT ƒë·ªÉ c·∫≠p nh·∫≠t
      await axios.put(`${url}/${editingId}`, data);
      editingId = null;
    } else {
      // N·∫øu th√™m m·ªõi th√¨ g·ªçi POST
      await axios.post(url, data);
    }
    formProduct.reset();
    quantityEle.value = 1;
    renderProducts(); // render l·∫°i b·∫£ng
  } catch (err) {
    console.error("L·ªói l∆∞u s·∫£n ph·∫©m:", err);
  }
});

// üìå X·ª≠ l√Ω x√≥a s·∫£n ph·∫©m
async function handleDelete(e) {
  const id = e.target.dataset.id;
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
    try {
      await axios.delete(`${url}/${id}`);
      renderProducts();
    } catch (err) {
      console.error("L·ªói x√≥a s·∫£n ph·∫©m:", err);
    }
  }
}

// üìå X·ª≠ l√Ω khi nh·∫•n n√∫t Update ‚Üí ƒë∆∞a d·ªØ li·ªáu l√™n form
async function handleEdit(e) {
  try {
    const id = e.target.dataset.id;
    const res = await axios.get(`${url}/${id}`);
    const product = res.data;

    // G√°n d·ªØ li·ªáu l√™n form ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªânh s·ª≠a
    titleEle.value = product.title;
    priceEle.value = product.price;
    quantityEle.value = product.quantity;
    editingId = product.id;
  } catch (err) {
    console.error("L·ªói l·∫•y s·∫£n ph·∫©m:", err);
  }
}

// üìå Reset form khi nh·∫•n n√∫t + Add new
btnAddNew.addEventListener("click", () => {
  editingId = null;
  formProduct.reset();
  quantityEle.value = 1;
});

// G·ªçi render l·∫ßn ƒë·∫ßu khi load trang
renderProducts();
